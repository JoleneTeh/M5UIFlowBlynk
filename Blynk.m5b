{"category":"Blynk","color":"#23c48e","blocks":["__Blynk_BlynkStart","__Blynk_PusuhNotification","__Blynk_VirtualPin"],"jscode":"// Block __Blynk_BlynkStart\nvar __Blynk_BlynkStart_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Blynk Start\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"auth_token\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"auth_token\"\n        }\n    ],\n    \"colour\": \"#23c48e\"\n};\n\nwindow['Blockly'].Blocks['__Blynk_BlynkStart'] = {\n    init: function() {\n        this.jsonInit(__Blynk_BlynkStart_json);\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_BlynkStart'] = function(block) {\n    var auth_token = Blockly.Python.valueToCode(block, 'auth_token', Blockly.Python.ORDER_NONE);\n    return `import BlynkLib\nBLYNK_AUTH = ${auth_token}\nblynk = BlynkLib.Blynk(BLYNK_AUTH)\n\nwhile True:\n  wait_ms(2)\n  blynk.run()\n\n` + \"\\n\";\n};\n\n// Block __Blynk_PusuhNotification\nvar __Blynk_PusuhNotification_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"PushNotification\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"text\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"text\"\n        }\n    ],\n    \"colour\": \"#23c48e\"\n};\n\nwindow['Blockly'].Blocks['__Blynk_PusuhNotification'] = {\n    init: function() {\n        this.jsonInit(__Blynk_PusuhNotification_json);\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_PusuhNotification'] = function(block) {\n    var text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_NONE);\n    return `blynk.notify(${text})` + \"\\n\";\n};\n\n// Block __Blynk_VirtualPin\nvar __Blynk_VirtualPin_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"VirtualPin\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"pin\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"pin\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"call\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"call\"\n        }\n    ],\n    \"colour\": \"#23c48e\"\n};\n\nwindow['Blockly'].Blocks['__Blynk_VirtualPin'] = {\n    init: function() {\n        this.jsonInit(__Blynk_VirtualPin_json);\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_VirtualPin'] = function(block) {\n    var pin = block.getFieldValue('pin');\nvar call = Blockly.Python.valueToCode(block, 'call', Blockly.Python.ORDER_NONE);\n    return `@blynk.VIRTUAL_WRITE(${pin})\ndef v${pin}_write_handler(value):\n    globals()[${call}](value)` + \"\\n\";\n};\n\n","code":{"BlynkStart":["window['Blockly'].Python['__Blynk_BlynkStart'] = function(block) {\n    var auth_token = Blockly.Python.valueToCode(block, 'auth_token', Blockly.Python.ORDER_NONE);\n    return `import BlynkLib\nBLYNK_AUTH = ${auth_token}\nblynk = BlynkLib.Blynk(BLYNK_AUTH)\n\nwhile True:\n  wait_ms(2)\n  blynk.run()\n\n` + \"\\n\";\n};\n\n","import BlynkLib\nBLYNK_AUTH = ${auth_token}\nblynk = BlynkLib.Blynk(BLYNK_AUTH)\n\nwhile True:\n  wait_ms(2)\n  blynk.run()\n\n"],"PusuhNotification":["window['Blockly'].Python['__Blynk_PusuhNotification'] = function(block) {\n    var text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_NONE);\n    return `blynk.notify(${text})` + \"\\n\";\n};\n\n","blynk.notify(${text})"],"VirtualPin":["window['Blockly'].Python['__Blynk_VirtualPin'] = function(block) {\n    var pin = block.getFieldValue('pin');\nvar call = Blockly.Python.valueToCode(block, 'call', Blockly.Python.ORDER_NONE);\n    return `@blynk.VIRTUAL_WRITE(${pin})\ndef v${pin}_write_handler(value):\n    globals()[${call}](value)` + \"\\n\";\n};\n\n","@blynk.VIRTUAL_WRITE(${pin})\ndef v${pin}_write_handler(value):\n    globals()[${call}](value)"]}}