{"category":"Blynk","color":"#23c48e","blocks":["__Blynk_Start","__Blynk_PushNotification","__Blynk_Input","__Blynk_Output","__Blynk_Event","__Blynk_Connect","__Blynk_Disconnect"],"jscode":"window.Blockly.defineProcedures = function() {\n    var funcnames = [];        \n    var procs = Blockly.Procedures.allProcedures(Blockly.getMainWorkspace());\n    procs[0].forEach(function(f) {\n        if (f.length > 0) {\n            funcnames.push(f[0]);\n        }\n    });  \n    procs[1].forEach(function(f) {\n        if (f.length > 0) {\n            funcnames.push(f[0]);\n        }\n    });    \n    return funcnames; \n};\n\n// Block __Blynk_Start\nvar __Blynk_Start_json = {\n  \"type\": \"blynkstart\",\n  \"message0\": \"%{BKY_BLYNK_START}\",\n  \"args0\": [\n    {\n      \"type\": \"input_value\",\n      \"name\": \"auth_token\",\n      \"check\": \"String\"\n    }\n  ],\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": \"#23c48e\"\n};\n\nwindow['Blockly'].Blocks['__Blynk_Start'] = {\n    init: function() {\n        this.jsonInit(__Blynk_Start_json);\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_Start'] = function(block) {\n    var auth_token = Blockly.Python.valueToCode(block, 'auth_token', Blockly.Python.ORDER_NONE);\n    return `import BlynkLib\nBLYNK_AUTH = ${auth_token}\nblynk = BlynkLib.Blynk(BLYNK_AUTH)\n\n@timerSch.event('__blynk_timer')\ndef __blink_timer():\n  blynk.run()\ntimerSch.run('__blynk_timer', 2, 0x00)\n` + \"\\n\";\n};\n\n// Block __Blynk_Input\nwindow['Blockly'].Blocks['__Blynk_Input'] = {\n    init: function() {\n        this.jsonInit(this._init());\n    },\n    _init: function() {\n        return {\n            message0: \"%{BKY_BLYNK_INPUT}\",\n            args0: [\n                {\n                    type: \"input_value\",\n                    name: \"pin\",\n                    check: \"Number\"\n                },\n                {\n                    type: \"field_dropdown\",\n                    name: \"call\",\n                    options: function() {\n                        const fns = window.Blockly.defineProcedures().map(f => [f, f]);\n                        return fns.length <= 0 ? [[Blockly.Msg[\"BLYNK_CREATE_FUNC\"], \"\"]] : fns;\n                    }\n                },\n            ],\n            previousStatement: null,\n            nextStatement: null,\n            inputsInline: true,\n            colour: \"#23c48e\"\n        }\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_Input'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_ATOMIC);    \n    var call = Blockly.Python.variableDB_.getName(block.getFieldValue('call'), Blockly.Procedures.NAME_TYPE);\n    return `@blynk.VIRTUAL_WRITE(${pin})\ndef v${pin}_write_handler(args): \n    globals()[\"${call}\"](*args)` + \"\\n\";\n};\n\n// Block __Blynk_Output\nvar __Blynk_Output_json = {\n    \"type\": \"blynkoutput\",\n    \"message0\": \"%{BKY_BLYNK_OUTPUT}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"pin\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"input_dummy\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"value\"\n      }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"colour\": \"#23c48e\"\n};\n\nwindow['Blockly'].Blocks['__Blynk_Output'] = {\n    init: function() {\n        this.jsonInit(__Blynk_Output_json);\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_Output'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_ATOMIC);\n    var value = Blockly.Python.valueToCode(block, 'value', Blockly.Python.ORDER_ATOMIC);\n    return `blynk.virtual_write(${pin}, ${value})` + \"\\n\";\n};\n\n// Block __Blynk_Event\nwindow['Blockly'].Blocks['__Blynk_Event'] = {\n    init: function() {\n        this.jsonInit(this._init());\n    },\n    _init: function() {\n        return {\n            message0: \"%{BKY_BLYNK_EVENT}\",\n            args0: [\n                {\n                    type: \"input_value\",\n                    name: \"event\",\n                    check: \"String\"\n                },\n                {\n                    type: \"field_dropdown\",\n                    name: \"call\",\n                    options: function() {\n                        const fns = window.Blockly.defineProcedures().map(f => [f, f]);\n                        return fns.length <= 0 ? [[Blockly.Msg[\"BLYNK_CREATE_FUNC\"], \"\"]] : fns;\n                    }\n                },\n            ],\n            previousStatement: null,\n            nextStatement: null,\n            inputsInline: true,\n            colour: \"#23c48e\"\n        }\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_Event'] = function(block) {\n    var event = Blockly.Python.valueToCode(block, 'event', Blockly.Python.ORDER_ATOMIC);    \n    var call = Blockly.Python.variableDB_.getName(block.getFieldValue('call'), Blockly.Procedures.NAME_TYPE);\n    return `@blynk.on(${event})\ndef __blynk_on_${event.slice(1, -1)}(args): \n    globals()[\"${call}\"](*args)` + \"\\n\";\n};\n\n// Block __Blynk_PushNotification\nvar __Blynk_PushNotification_json = {\n    \"type\": \"blynkpushnotification\",\n    \"message0\": \"%{BKY_BLYNK_PUSH}\",\n    \"args0\": [\n        {\n        \"type\": \"input_value\",\n        \"name\": \"text\",\n        \"check\": \"String\"\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"colour\": \"#23c48e\"\n};\n\nwindow['Blockly'].Blocks['__Blynk_PushNotification'] = {\n    init: function() {\n        this.jsonInit(__Blynk_PushNotification_json);\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_PushNotification'] = function(block) {\n    var text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    return `blynk.notify(${text})` + \"\\n\";\n};\n\n// Block __Blynk_Connect\nvar __Blynk_Connect_json = {\n    \"type\": \"blynkconnect\",\n    \"message0\": \"%{BKY_BLYNK_CONNECT}\",\n    \"args0\": [\n        {\n            \"type\": \"input_dummy\"\n        },\n        {\n            \"type\": \"input_statement\",\n            \"name\": \"codes\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"colour\": \"#23c48e\"\n};\n\nwindow['Blockly'].Blocks['__Blynk_Connect'] = {\n    init: function() {\n        this.jsonInit(__Blynk_Connect_json);\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_Connect'] = function(block) {\n    var codes = Blockly.Python.statementToCode(block, 'codes');\n    var globalVar = '';\n    if (window.Blockly.defineGlobal().length > 0) {\n        globalVar = \"  global \" + window.Blockly.defineGlobal().join(\", \") + \"\\n\";\n    }\n    return `@blynk.on('connected')\ndef __blynk_on_connected():\n${globalVar}${codes}  pass` + \"\\n\";\n};\n\n// Block __Blynk_Disconnect\nvar __Blynk_Disconnect_json = {\n    \"type\": \"procedures_defnoreturn\", // for skip BlocklyEditorService.prototype.checkDisabled\n    \"message0\": \"%{BKY_BLYNK_DISCONNECT}\",\n    \"args0\": [\n        {\n            \"type\": \"input_dummy\"\n        },\n        {\n            \"type\": \"input_statement\",\n            \"name\": \"codes\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"colour\": \"#23c48e\"\n};\n\nwindow['Blockly'].Blocks['__Blynk_Disconnect'] = {\n    init: function() {\n        this.jsonInit(__Blynk_Disconnect_json);\n    }\n};\n\nwindow['Blockly'].Python['__Blynk_Disconnect'] = function(block) {\n    var codes = Blockly.Python.statementToCode(block, 'codes');\n    var globalVar = '';\n    if (window.Blockly.defineGlobal().length > 0) {\n        globalVar = \"  global \" + window.Blockly.defineGlobal().join(\", \") + \"\\n\"\n    }\n    return `@blynk.on('disconnected')\ndef __blynk_on_disconnected():\n${globalVar}${codes}` + \"\\n\";\n};\n\nif (window.Blockly.Msg[\"FUNCTIONS\"] === \"関数\") {\n    window.Blockly.Msg[\"BLYNK_START\"] = \"Blynkスタート トークン %1\";\n    window.Blockly.Msg[\"BLYNK_INPUT\"] = \"Blynk V %1 からの入力を %2 で処理\";\n    window.Blockly.Msg[\"BLYNK_CREATE_FUNC\"] = \"先に関数を作ってください\";\n    window.Blockly.Msg[\"BLYNK_OUTPUT\"] = \"Blynk V %1 へ %2 %3 を出力\";\n    window.Blockly.Msg[\"BLYNK_EVENT\"] = \"Blynkで %1 が発生したら %2 で処理\";\n    window.Blockly.Msg[\"BLYNK_PUSH\"] = \"Blynkへ %1 をプッシュ通知\";\n    window.Blockly.Msg[\"BLYNK_CONNECT\"] = \"Blynkが接続された %1 %2\";\n    window.Blockly.Msg[\"BLYNK_DISCONNECT\"] = \"Blynkから切断された %1 %2\";\n} else {\n    window.Blockly.Msg[\"BLYNK_START\"] = \"Blynk Start with AuthToken: %1\";\n    window.Blockly.Msg[\"BLYNK_INPUT\"] = \"Blynk Read from V %1 on %2\";\n    window.Blockly.Msg[\"BLYNK_CREATE_FUNC\"] = \"Please create a function first\";\n    window.Blockly.Msg[\"BLYNK_OUTPUT\"] = \"Blynk Output to V %1 with %2 %3\";\n    window.Blockly.Msg[\"BLYNK_EVENT\"] = \"Handle Blynk Event %1 on %2\";\n    window.Blockly.Msg[\"BLYNK_PUSH\"] = \"Blynk Push Notification with %1\";\n    window.Blockly.Msg[\"BLYNK_CONNECT\"] = \"Blynk Connected %1 %2\";\n    window.Blockly.Msg[\"BLYNK_DISCONNECT\"] = \"Blynk Disconnected %1 %2\";\n}","code":{"Start":["window['Blockly'].Python['__Blynk_Start'] = function(block) {\n    var auth_token = Blockly.Python.valueToCode(block, 'auth_token', Blockly.Python.ORDER_NONE);\n    return `import BlynkLib\nBLYNK_AUTH = ${auth_token}\nblynk = BlynkLib.Blynk(BLYNK_AUTH)\n\n@timerSch.event('__blynk_timer')\ndef __blink_timer():\n  blynk.run()\ntimerSch.run('__blynk_timer', 2, 0x00)\n` + \"\\n\";\n};\n\n","import BlynkLib\nBLYNK_AUTH = ${auth_token}\nblynk = BlynkLib.Blynk(BLYNK_AUTH)\n\n@timerSch.event('__blynk_timer')\ndef __blink_timer():\n  blynk.run()\ntimerSch.run('__blynk_timer', 2, 0x00)\n"],"PushNotification":["window['Blockly'].Python['__Blynk_PushNotification'] = function(block) {\n    var text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_NONE);\n    return `blynk.notify(${text})` + \"\\n\";\n};\n\n","blynk.notify(${text})"],"Input":["window['Blockly'].Python['__Blynk_Input'] = function(block) {\n    var pin = block.getFieldValue('pin');\nvar call = Blockly.Python.valueToCode(block, 'call', Blockly.Python.ORDER_NONE);\n    return `@blynk.VIRTUAL_WRITE(${pin})\ndef v${pin}_write_handler(value):\n    globals()[${call}](*value)` + \"\\n\";\n};\n\n","@blynk.VIRTUAL_WRITE(${pin})\ndef v${pin}_write_handler(value):\n    globals()[${call}](*value)"],"Output":["window['Blockly'].Python['__Blynk_Output'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_NONE);\nvar value = Blockly.Python.valueToCode(block, 'value', Blockly.Python.ORDER_NONE);\n    return `blynk.virtual_write(${pin}, ${value})` + \"\\n\";\n};\n\n","blynk.virtual_write(${pin}, ${value})"],"Event":["window['Blockly'].Python['__Blynk_Event'] = function(block) {\n    var event = Blockly.Python.valueToCode(block, 'event', Blockly.Python.ORDER_NONE);\nvar call = Blockly.Python.valueToCode(block, 'call', Blockly.Python.ORDER_NONE);\n    return `@blynk.on(${event})\ndef __blynk_on_${event.slice(1, -1)}(*args):\n    globals()[${call}](*args)` + \"\\n\";\n};\n\n","@blynk.on(${event})\ndef __blynk_on_${event.slice(1, -1)}(*args):\n    globals()[${call}](*args)"],"Connect":["window['Blockly'].Python['__Blynk_Connect'] = function(block) {\n        return `@blynk.on('connect')\ndef __blynk_on_connect(*args):\n    globals()[${call}](*args)` + \"\\n\";\n};\n\n","@blynk.on('connect')\ndef __blynk_on_connect(*args):\n    globals()[${call}](*args)"],"Disconnect":["window['Blockly'].Python['__Blynk_Disconnect'] = function(block) {\n        return `@blynk.on('connect')\ndef __blynk_on_connect(*args):\n    globals()[${call}](*args)` + \"\\n\";\n};\n\n","@blynk.on('connect')\ndef __blynk_on_connect(*args):\n    globals()[${call}](*args)"]}}